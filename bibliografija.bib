
@article{ongaro_consensus,
	title = {Consensus: Bridging Theory and Practice},
    date = {2014},
	pages = {258},
	author = {Ongaro, Diego},
	langid = {english},
	file = {Ongaro - Consensus Bridging Theory and Practice.pdf:C\:\\Users\\Edvard\\Zotero\\storage\\9KXF3ELJ\\Ongaro - Consensus Bridging Theory and Practice.pdf:application/pdf}
}

@online{diego_designing_2016,
	title = {Designing for Understandability: The Raft Consensus Algorithm - {YouTube}},
	url = {https://www.youtube.com/watch?v=vYp4LYbnnW8},
	author = {Diego, Ongaro and John, Ousterhout},
	urldate = {2020-04-07},
	date = {2016-10-28}
}

@software{rabbitmqra,
	author = {Ra},
	title = {rabbitmq/ra},
	url = {https://github.com/rabbitmq/ra},
	abstract = {A Raft implementation for Erlang and Elixir that strives to be efficient and make it easier to use multiple Raft clusters in a single system.},
	publisher = {{RabbitMQ}},
	urldate = {2020-02-22},
	date = {2020-02-21},
	note = {original-date: 2017-02-22T17:07:57Z},
	keywords = {distributed-systems, erlang, raft, raft-consensus-algorithm}
}

@book{steen_distributed_2017,
	location = {London},
	edition = {Third edition (Version 3.01 (2017))},
	title = {Distributed systems},
	isbn = {978-90-815406-2-9 978-1-5430-5738-6},
	pages = {582},
	publisher = {Pearson Education},
	author = {Steen, Maarten van and Tanenbaum, Andrew S.},
	date = {2017},
	note = {{OCLC}: 1006750554}
}

@online{rabbitmq_website,
    author = {Pivotal},
	title = {Messaging that just works — {RabbitMQ}},
	url = {https://www.rabbitmq.com/},
	urldate = {2020-03-22},
	file = {Messaging that just works — RabbitMQ:C\:\\Users\\Edvard\\Zotero\\storage\\DP9S95V6\\www.rabbitmq.com.html:text/html}
}

@online{ericsson_erlang_processes_2016,
    author = {Erlang},
	title = {Erlang -- Processes},
	url = {http://erlang.org/doc/reference_manual/processes.html#monitors},
	urldate = {2020-05-06},
	date = {2020-05-06},
	file = {Erlang -- Processes:C\:\\Users\\Edvard\\Zotero\\storage\\3XSGZF55\\processes.html:text/html}
}

@software{rabbitmq_aten_2020,
	title = {rabbitmq/aten},
	author = {Aten},
	url = {https://github.com/rabbitmq/aten},
	abstract = {An adaptive accrual node failure detection library for Elixir and Erlang},
	publisher = {{RabbitMQ}},
	urldate = {2020-05-06},
	date = {2020-04-22},
	note = {original-date: 2018-01-31T13:51:46Z},
	keywords = {distributed-systems, elixir, erlang, failure-detection}
}

@online{erlang_introduction,
	title = {Erlang -- Introduction},
	author = {Erlang},
	url = {http://erlang.org/doc/system_architecture_intro/sys_arch_intro.html},
	urldate = {2020-05-13},
	date = {2020-05-13},
	file = {Erlang -- Introduction:/home/ed/Zotero/storage/6G4ZKPYB/sys_arch_intro.html:text/html}
}

@online{erlang_distributed,
	title = {Erlang -- Distributed Erlang},
	author = {Erlang},
	url = {http://erlang.org/doc/reference_manual/distributed.html},
	urldate = {2020-05-13},
	date = {2020-05-13},
	file = {Erlang -- Distributed Erlang:/home/ed/Zotero/storage/M25M83DY/distributed.html:text/html}
}


@book{hebert_learn_2013,
	location = {San Francisco},
	edition = {1 edition},
	title = {Learn You Some Erlang for Great Good!: A Beginner's Guide},
	isbn = {978-1-59327-435-1},
	shorttitle = {Learn You Some Erlang for Great Good!},
	abstract = {Erlang is the language of choice for programmers who want to write robust, concurrent applications, but its strange syntax and functional design can intimidate the uninitiated. Luckily, there’s a new weapon in the battle against Erlang-phobia: Learn You Some Erlang for Great Good!Erlang maestro Fred Hébert starts slow and eases you into the basics: You’ll learn about Erlang’s unorthodox syntax, its data structures, its type system (or lack thereof!), and basic functional programming techniques. Once you’ve wrapped your head around the simple stuff, you’ll tackle the real meat-and-potatoes of the language: concurrency, distributed computing, hot code loading, and all the other dark magic that makes Erlang such a hot topic among today’s savvy developers.As you dive into Erlang’s functional fantasy world, you’ll learn about:–Testing your applications with {EUnit} and Common Test–Building and releasing your applications with the {OTP} framework–Passing messages, raising errors, and starting/stopping processes over many nodes–Storing and retrieving data using Mnesia and {ETS}–Network programming with {TCP}, {UDP}, and the inet module–The simple joys and potential pitfalls of writing distributed, concurrent {applicationsPacked} with lighthearted illustrations and just the right mix of offbeat and practical example programs, Learn You Some Erlang for Great Good! is the perfect entry point into the sometimes-crazy, always-thrilling world of Erlang.},
	publisher = {No Starch Press},
	author = {Hebert, Fred},
	date = {2013-01-13}
}

@article{agha_actors_1985,
	title = {{ACTORS}: A Model of Concurrent Computation in Distributed Systems},
	url = {https://dspace.mit.edu/handle/1721.1/6952},
	shorttitle = {{ACTORS}},
	abstract = {A foundational model of concurrency is  developed in this thesis. We examine issues  in the design of parallel systems and show  why the actor model is suitable for exploiting  large-scale parallelism. Concurrency in actors  is constrained only by the availability of  hardware resources and by the logical  dependence inherent in the computation.  Unlike dataflow and functional programming,  however, actors are dynamically  reconfigurable and can model shared  resources with changing local state.  Concurrency is spawned in actors using  asynchronous message-passing, pipelining,  and the dynamic creation of actors. This  thesis deals with some central issues in  distributed computing. Specifically, problems  of divergence and deadlock are addressed.  For example, actors permit dynamic deadlock  detection and removal. The problem of  divergence is contained because  independent transactions can execute  concurrently and potentially infinite processes  are nevertheless available for interaction.},
	author = {Agha, Gul Abdulnabi},
	urldate = {2020-05-14},
	date = {1985-06-01},
	langid = {american},
	note = {Accepted: 2004-10-20T20:10:20Z},
	file = {Full Text PDF:C\:\\Users\\Edvard\\Zotero\\storage\\K5ZEVRMU\\Agha - 1985 - ACTORS A Model of Concurrent Computation in Distr.pdf:application/pdf;Snapshot:C\:\\Users\\Edvard\\Zotero\\storage\\5GVEF55X\\6952.html:text/html}
}

@article{farrugia_towards_nodate,
	title = {Towards a Formalisation of Erlang Failure and Failure Detection},
	abstract = {This paper discusses preliminary investigations on the behaviour of the error handling mechanisms in Erlang, a parallel language which is renowned for its fault tolerant capabilities. A formal model is deﬁned in order to provide a precise and unambiguous description of the behaviour of these mechanisms. The correctness of the model is evaluated by considering a simple Erlang program and comparing the behaviour as described by the formal semantics with that of actual Erlang.},
	pages = {6},
	author = {Farrugia, Audrianne and Francalanza, Adrian},
	langid = {english},
	file = {Farrugia and Francalanza - Towards a Formalisation of Erlang Failure and Fail.pdf:C\:\\Users\\Edvard\\Zotero\\storage\\56YDURMC\\Farrugia and Francalanza - Towards a Formalisation of Erlang Failure and Fail.pdf:application/pdf},
	date = {2012}
}

@inproceedings{characterizing_cloud_hardware_rel,
  title={Characterizing cloud computing hardware reliability},
  author={Vishwanath, Kashi Venkatesh and Nagappan, Nachiappan},
  booktitle={Proceedings of the 1st ACM symposium on Cloud computing},
  pages={193--204},
  year={2010}
}

@inproceedings{parallel_vs_distributed,
  title={Parallel computing vs. distributed computing: a great confusion?(position paper)},
  author={Raynal, Michel},
  booktitle={European Conference on Parallel Processing},
  pages={41--53},
  year={2015},
  organization={Springer}
}


@software{ongaro_raftscope_2020,
	title = {ongardie/raftscope},
	url = {https://github.com/ongardie/raftscope},
	abstract = {super hacky visualization of Raft. Contribute to ongardie/raftscope development by creating an account on {GitHub}.},
	author = {Ongaro, Diego},
	urldate = {2020-06-11},
	date = {2020-06-07},
	note = {original-date: 2014-05-21T09:36:26Z}
}

@inproceedings{satzger2007_new_accrual_failure,
  title={A new adaptive accrual failure detector for dependable distributed systems},
  author={Satzger, Benjamin and Pietzowski, Andreas and Trumler, Wolfgang and Ungerer, Theo},
  booktitle={Proceedings of the 2007 ACM symposium on Applied computing},
  pages={551--555},
  year={2007}
}

@article{amazon_use_formal_methods,
  title={Use of formal methods at Amazon Web Services},
  author={Newcombe, Chris and Rath, Tim and Zhang, Fan and Munteanu, Bogdan and Brooker, Marc and Deardeuff, Michael},
  journal={See http://research. microsoft. com/en-us/um/people/lamport/tla/formal-methods-amazon. pdf},
  year={2014}
}

@book{lamport2002specifying,
  title={Specifying systems: the TLA+ language and tools for hardware and software engineers},
  author={Lamport, Leslie},
  year={2002},
  publisher={Addison-Wesley Longman Publishing Co., Inc.}
}


